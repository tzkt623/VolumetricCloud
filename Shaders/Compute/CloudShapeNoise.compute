#pragma kernel main3D

#include "../Head/PerlinNoise.cginc"
#include "../Head/WorleyNoise.cginc"
#include "../Head/Function.cginc"

RWTexture3D<float4> outShapeTex3D;
RWTexture3D<float> outShapePerlinNoiseTex3D;

StructuredBuffer<int3> inCloudWLMarkPoints3D0;
StructuredBuffer<int3> inCloudWLMarkPoints3D1;
StructuredBuffer<int3> inCloudWLMarkPoints3D2;
StructuredBuffer<int3> inCloudWLMarkPoints3D3;
StructuredBuffer<int> inCloudWLGroupGridCount;

int inResolution;

int inCloudPLOctave;
float inCloudPLFrequency;
float inCloudPLLacunarity;
float inCloudPLPersistence;
float3 inCloudPLOffset;


bool inCloudWLFlip;
float inCloudWLFrequency;
float3 inCloudWLOffset;

float calculateWorleyNoise(in StructuredBuffer<int3> samplePoints
	, float3 pos, float freq, int octave, int gridCount)
{
	float grid_rate = 1.0f / gridCount;
	int grid_length = inResolution / gridCount;

	float strength = 1.0f;
	float sum_strength = 0;
	float noise = 0;

	for (int o = 0; o < octave; o++)
	{
		noise += getNoiseF(samplePoints, inResolution
			, pos * freq + inCloudWLOffset
			, gridCount, grid_length, grid_rate) * strength;

		sum_strength += strength;
		freq *= 2.0f;
		strength *= 0.5f;
	}

	noise /= sum_strength;

	if (inCloudWLFlip)
	{
		return 1 - noise;
	}

	return noise;
}

float calculatePerlinNoise(in float3 pos)
{
	float freq = floor(inCloudPLFrequency);
	float strength = 1.0f;
	float sum_strength = 0;
	float noise = 0;
	for (int o = 0; o < inCloudPLOctave; o++)
	{
		noise += pn3D(pos * freq + inCloudPLOffset, freq) * strength;
		//noise += pnoise(pos * freq, freq) * strength;
		sum_strength += strength;

		freq *= inCloudPLLacunarity;
		strength *= inCloudPLPersistence;
	}

	noise /= sum_strength;

	return noise * 0.5f + 0.5f;
	//return noise;
}

[numthreads(8, 8, 2)]
void main3D(uint3 id : SV_DispatchThreadID)
{
	float3 pos = id / (float)inResolution;

	float worley00 = calculateWorleyNoise(inCloudWLMarkPoints3D0
		, pos, inCloudWLFrequency, 1
		, inCloudWLGroupGridCount[0]);

	float worley01 = calculateWorleyNoise(inCloudWLMarkPoints3D1
		, pos, inCloudWLFrequency, 1
		, inCloudWLGroupGridCount[1]);

	float worley02 = calculateWorleyNoise(inCloudWLMarkPoints3D2
		, pos, inCloudWLFrequency, 1
		, inCloudWLGroupGridCount[2]);

	float worley03 = calculateWorleyNoise(inCloudWLMarkPoints3D3
		, pos, inCloudWLFrequency, 1
		, inCloudWLGroupGridCount[3]);

	float perlin = calculatePerlinNoise(pos);
	perlin = smoothstep(0.0, 1.0, perlin);

	float perlin_worley = remap(perlin, 0.0f, 1.0f, worley00, 1.0f);
	//float perlin_worley = remap(perlin, worley00, 1.0f, 0.0f, 1.0f);
	//float perlin_worley = worley00 - perlin * (1 - worley00);

	outShapeTex3D[id] = float4(perlin_worley, worley01, worley02, worley03);
	outShapePerlinNoiseTex3D[id] = perlin;
}