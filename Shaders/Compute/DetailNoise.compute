#pragma kernel main3D

#include "../Head/WorleyNoise.cginc"

RWTexture3D<float4> outDetailTex3D;

StructuredBuffer<int3> inDetailWLMarkPoints3D0;
StructuredBuffer<int3> inDetailWLMarkPoints3D1;
StructuredBuffer<int3> inDetailWLMarkPoints3D2;
StructuredBuffer<int> inDetailWLGroupGridCount;

int inResolution;
bool inDetailWLFlip;
float3 inDetailWLOffset;
float inDetailWLFrequency;

float calculateWorleyNoise(in StructuredBuffer<int3> samplePoints, in int gridCount, in float3 pos, float freq)
{
	float grid_rate = 1.0f / gridCount;
	int grid_length = inResolution / gridCount;

	float strength = 1.0f;
	float sum_strength = 0.0f;
	float noise = 0;
	
	for (int i = 0; i < 3; i++)
	{
		noise += getNoiseF(samplePoints, inResolution
			, pos * freq + inDetailWLOffset
			, gridCount, grid_length, grid_rate) * strength;

		sum_strength += strength;
		freq *= 2.0f;
		strength *= 0.5f;
	}

	noise /= sum_strength;
	
	if (inDetailWLFlip)
	{
		noise = 1 - noise;
	}
	
	return noise;
}


[numthreads(8, 8, 2)]
void main3D(uint3 id : SV_DispatchThreadID)
{
	float3 pos = float3(id.x / (float)inResolution
		, id.y / (float)inResolution
		, id.z / (float)inResolution);

	int grid_count0 = inDetailWLGroupGridCount[0];
	int grid_count1 = inDetailWLGroupGridCount[1];
	int grid_count2 = inDetailWLGroupGridCount[2];

	float worley00 = calculateWorleyNoise(inDetailWLMarkPoints3D0, grid_count0, pos, inDetailWLFrequency);
	float worley01 = calculateWorleyNoise(inDetailWLMarkPoints3D1, grid_count1, pos, inDetailWLFrequency);
	float worley02 = calculateWorleyNoise(inDetailWLMarkPoints3D2, grid_count2, pos, inDetailWLFrequency);

	float worley_fbm = dot(float3(worley00, worley01, worley02), float3(0.625, 0.25, 0.125));

	outDetailTex3D[id] = float4(worley00, worley01, worley02, worley_fbm);
}