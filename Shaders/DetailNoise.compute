#pragma kernel main3D

#include "WorleyNoise.cginc"

RWTexture3D<float4> outDetailTex3D;
StructuredBuffer<int3> inSamplerPoint0;
StructuredBuffer<int3> inSamplerPoint1;
StructuredBuffer<int3> inSamplerPoint2;

int inGridLength;
int inGridCount1;
int inGridCount2;
int inGridCount3;
int inResolution;
float inGridRate;
float3 inOffset;
bool inFlip;
float inFrequency;

float calculateWorleyNoise(in StructuredBuffer<int3> samplerPoint, in int gridCount, in int gridLength, in float rate, float3 pos, float freq)
{
	float strength = 1.0f;
	float sum_strength = 1.0f;
	float noise = 0;
	for (int o = 0; o < 3; o++)
	{
		if (inFlip)
		{
			noise += (1 - getNoiseF(samplerPoint, inResolution
				, pos * freq + inOffset, gridCount, gridLength, rate)) * strength;
		}
		else
		{
			noise += getNoiseF(samplerPoint, inResolution, pos * freq + inOffset, gridCount, gridLength, rate) * strength;
		}
		freq *= 2.0f;
		strength *= 0.5f;
		sum_strength += strength;
	}

	noise /= sum_strength;

	return noise;
}


[numthreads(8, 8, 2)]
void main3D(uint3 id : SV_DispatchThreadID)
{
	float3 pos = float3(id.x / (float)inResolution
		, id.y / (float)inResolution
		, id.z / (float)inResolution);

	const int grid_count0 = 2;
	const int grid_count1 = 4;
	const int grid_count2 = 8;

	float worley00 = calculateWorleyNoise(
		inSamplerPoint0, grid_count0, inResolution / grid_count0, 1.0 / grid_count0
		, pos, 1);
	float worley01 = calculateWorleyNoise(
		inSamplerPoint1, grid_count1, inResolution / grid_count1, 1.0 / grid_count1
		, pos, 1);
	float worley02 = calculateWorleyNoise(
		inSamplerPoint2, grid_count2, inResolution / grid_count2, 1.0 / grid_count2
		, pos, 1);

	float worley_fbm = dot(float3(worley00, worley01, worley02), float3(0.625, 0.25, 0.125));

	outDetailTex3D[id] = float4(worley00, worley01, worley02, worley_fbm);
}